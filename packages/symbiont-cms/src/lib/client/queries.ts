import { GraphQLClient, gql } from 'graphql-request';
import { loadConfig } from './load-config.js';
import type { Post, PublicSymbiontConfig } from '../types.js';

export const GET_POST_BY_SLUG = gql`
	query GetPostBySlug($slug: String!) {
		posts(where: { slug: { _eq: $slug } }) {
			id
			title
			content
			publish_at
			tags
		}
	}
`;

export const GET_ALL_POSTS = gql`
	query GetAllPosts($limit: Int, $offset: Int, $short_db_ID: String!) {
		posts(
			where: { source_id: { _eq: $short_db_ID } }
			order_by: { publish_at: desc }
			limit: $limit
			offset: $offset
		) {
			id
			title
			slug
			content
			publish_at
			tags
			updated_at
		}
	}
`;

export interface GetPostBySlugResult {
	posts: Post[];
}

export interface GetAllPostsResult {
	posts: Post[];
}

export interface SymbiontGraphQLClientOptions {
	headers?: Record<string, string>;
	fetch?: typeof fetch;
}

export function createSymbiontGraphQLClient(endpoint: string, options: SymbiontGraphQLClientOptions = {}) {
	const { headers, fetch: customFetch } = options;
	return new GraphQLClient(endpoint, { headers, fetch: customFetch });
}

export async function getPostBySlug(client: GraphQLClient, slug: string) {
	const { posts } = await client.request<GetPostBySlugResult>(GET_POST_BY_SLUG, { slug });
	return posts[0] ?? null;
}

export async function getAllPosts(
	client: GraphQLClient,
	options: { limit?: number; offset?: number; short_db_ID: string }
) {
	const { posts } = await client.request<GetAllPostsResult>(GET_ALL_POSTS, {
		limit: options.limit,
		offset: options.offset,
		short_db_ID: options.short_db_ID
	});
	return posts;
}

/**
 * Options for fetching posts.
 */
export interface GetPostsOptions {
	/** Custom fetch function for SSR */
	fetch?: typeof fetch;
	/** Maximum number of posts to return */
	limit?: number;
	/** Number of posts to skip */
	offset?: number;
	/** Override the default short_db_ID from config */
	shortDbId?: string;
}

/**
 * High-level helper that fetches posts using configuration from virtual:symbiont/config.
 * This function can be called from anywhere (client or server) and automatically uses
 * the public configuration extracted at build time.
 * 
 * @param options - Optional fetch function for SSR and pagination settings
 * @returns Array of posts from the configured database
 * 
 * @example
 * // In a SvelteKit load function
 * export const load = async ({ fetch }) => {
 *   const posts = await getPosts({ fetch, limit: 10 });
 *   return { posts };
 * };
 */
export async function getPosts(options: GetPostsOptions = {}): Promise<Post[]> {
	// Import the virtual config module generated by the Vite plugin
	const config: PublicSymbiontConfig = await loadConfig();
	
	const client = createSymbiontGraphQLClient(config.graphqlEndpoint, { 
		fetch: options.fetch 
	});
	
	return getAllPosts(client, {
		limit: options.limit || 100,
		offset: options.offset || 0,
		short_db_ID: options.shortDbId || config.primaryShortDbId
	});
}

/**
 * Fetch a single post by its slug.
 * 
 * @param slug - The post slug to fetch
 * @param options - Optional fetch function for SSR
 * @returns The post if found, null otherwise
 * 
 * @example
 * export const load = async ({ params, fetch }) => {
 *   const post = await getPost(params.slug, { fetch });
 *   if (!post) throw error(404);
 *   return { post };
 * };
 */
export async function getPost(
	slug: string, 
	options: Pick<GetPostsOptions, 'fetch'> = {}
): Promise<Post | null> {
	const config: PublicSymbiontConfig = await loadConfig();
	
	const client = createSymbiontGraphQLClient(config.graphqlEndpoint, { 
		fetch: options.fetch 
	});
	
	return getPostBySlug(client, slug);
}
